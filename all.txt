#ifndef COLORS_HPP
#define COLORS_HPP

#define RED		"\033[1;31m"
#define GREEN	"\033[1;32m"
#define YELLOW	"\033[1;33m"
#define BLUE	"\033[1;34m"
#define MAGENTA	"\033[1;35m"
#define CYAN	"\033[1;36m"
#define ORANGE	"\033[1;38;5;208m"
#define BLACK	"\033[1;30m"
#define BOLD	"\033[1;37m"
#define RESET	"\033[0m"

#define bannerIRC "\n" \
				BLUE "    ____________        ________  ______\n" RESET \
                BLUE "   / ____/_  __/       /  _/ __ \\/ ____/\n" RESET \
                BLUE "  / /_    / /          / // /_/ / /     \n" RESET \
                BLUE " / __/   / / ______  _/ // _, _/ /___   \n" RESET \
                BLUE "/_/     /_/ /_____/ /___/_/ |_|\\____/   \n\n" RESET \

#define bannerServer "\n" \
				BLUE "   _____ __________ _    ____________  \n" RESET \
                BLUE "  / ___// ____/ __ \\ |  / / ____/ __ \\\n" RESET \
                BLUE "  \\__ \\/ __/ / /_/ / | / / __/ / /_/ /\n" RESET \
                BLUE " ___/ / /___/ _, _/| |/ / /___/ _, _/ \n" RESET \
                BLUE "/____/_____/_/ |_| |___/_____/_/ |_|  \n\n" RESET \

#endif // COLORS_HPP

#ifndef LIBRARY_HPP
#define LIBRARY_HPP

#include "../includes/Colors.hpp"

#include <vector>		// pour vector
#include <map>			// pour map
#include <sys/socket.h>	// pour socket()
#include <sys/types.h>	// pour socket()
#include <netinet/in.h>	// pour sockaddr_in
#include <fcntl.h>		// pour fcntl()
#include <unistd.h>		// pour close()
#include <arpa/inet.h>	// pour inet_ntoa()
#include <poll.h>		// pour poll()
#include <csignal>		// pour signal()
#include <cstdlib>		// pour std::atoi
#include <string>		// Pour std::string
#include <cstring>		// Pour memset
#include <iostream>
#include <cstdio>

#endif // LIBRARY_HPP

#ifndef USER_HPP
# define USER_HPP

#include "./Library.hpp"

class User {
	private:
		int			_index;
		std::string	_userName;
		std::string	_nickName;

	public:
		User();
		User(int index, const std::string& username, const std::string& nickname);
		~User();

		int			getIndex() const;
		std::string	getUsername() const;
		std::string	getNickname() const;

		void		setIndex(int index);
		void		setUsername(const std::string& username);
		void		setNickname(const std::string& nickname);
};

#endif // USER_HPP

#ifndef CLIENT_HPP
#define CLIENT_HPP

#include "./User.hpp"

class Client {

	private:
		int					_client_socket;
		struct sockaddr_in	_client_addr;
		User				_user;

	public:
		Client();
		~Client();

		// Getters
		struct sockaddr_in&	getClientAddr();
		int					getClientSocket() const;
		User&				getUser();

		// Setters
		void				setClientSocket(int socket);
		void				setClientAddr(const struct sockaddr_in& addr);
		void				setUser(const User& user);

		// Fonctions
		void				handleClientMsg(const std::string& message, Client& client);
		void				sendClientMsg(int client_socket, const char* message);
		void				welcomeClient(int client_socket);
};

#endif // CLIENT_HPP


#ifndef SERVER_HPP
#define SERVER_HPP

#include "./Client.hpp"

class Server {

	private:
		int						_server_socket;
		struct sockaddr_in		_server_addr;
		std::string				_password;
		std::map<int, Client>	_clients;
		int						_port;

	public:
		Server();
		Server(int _port, const std::string &password);
		~Server();

		// Functions
		void	startServer();
		void addUser(Client &client, const std::string &username, const std::string &nickname);
};

#endif // SERVER_HPP

#include "../includes/User.hpp"

User::User() : _index(0), _userName("username"), _nickName("nickname") { }

User::User(int index, const std::string& username, const std::string& nickname) : _index(index), _userName(username), _nickName(nickname) { }

User::~User() { }

int	User::getIndex() const {
	return (_index);
}

std::string	User::getUsername() const {
	return (_userName);
}

std::string	User::getNickname() const {
	return (_nickName);
}

void User::setIndex(int index) {
	_index = index;
}

void User::setUsername(const std::string& username) {
	_userName = username;
}

void User::setNickname(const std::string& nickname) {
	_nickName = nickname;
}


#include "../includes/Client.hpp"

/************************************* CONST ET DEST *************************************/

Client::Client() : _client_socket(-1) {
	memset(&_client_addr, 0, sizeof(_client_addr));
}

Client::~Client() {
	if (_client_socket != -1)
		close(_client_socket);
}

/*************************************** GETTERS ***************************************/

int Client::getClientSocket() const {
	return (_client_socket);
}

struct sockaddr_in& Client::getClientAddr() {
	return (_client_addr);
}

User& Client::getUser() {
	return (_user);
}

/*************************************** SETTERS ***************************************/

void Client::setClientSocket(int socket) {
	_client_socket = socket;
}

void Client::setClientAddr(const struct sockaddr_in& addr) {
	_client_addr = addr;
}

void Client::setUser(const User& user) {
	_user = user;
}

/************************************** FUNCTIONS **************************************/

void Client::handleClientMsg(const std::string& message, Client& client) {
	std::cout << "Client: " << message << std::endl; //suppr

	if (message.substr(0, 6) == "/login")
		std::cout << "Login command received" << std::endl;
	// else if (message.substr(0, 8) == "/channel")
	// 	std::cout << "Channel command received" << std::endl;
	else
		std::cout << "Unknown command" << std::endl;
	(void)client;
}

void Client::sendClientMsg(int client_socket, const char* message) {
	if (send(client_socket, message, strlen(message), 0) == -1) {
		std::cerr << "Error: failed to send message" << std::endl;
	}
}

void Client::welcomeClient(int client_socket) {
	const char* welcomeMsg = "\n ~~~ Welcome on our IRC Server! ~~~ \n\n";
	sendClientMsg(client_socket, welcomeMsg);
}

#include "../includes/Server.hpp"

/************************************* CONST ET DEST *************************************/

Server::Server() : _server_socket(-1), _password("1234"), _port(6667) {
}

Server::Server(int port, const std::string &password) : _server_socket(-1), _password(password), _port(port) {
	// 1. Crée un socket: socket()
	_server_socket = socket(AF_INET, SOCK_STREAM, 0);
	if (_server_socket == -1) {
		std::cerr << "Error: socket creation failed" << std::endl;
		exit(1);
	}

	// 2. Lie le socket à une adresse IP et un _port: bind(), htons()
	_server_addr.sin_family = AF_INET;
	_server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	_server_addr.sin_port = htons(_port);

	if (bind(_server_socket, (struct sockaddr*)&_server_addr, sizeof(_server_addr)) == -1) {
		std::cerr << "Error: bind failed" << std::endl;
		close(_server_socket);
		exit(1);
	}

	// 3. Met le socket en écoute pour les connexions entrantes: listen()
	if (listen(_server_socket, SOMAXCONN) == -1) {
		std::cerr << "Error: listen failed" << std::endl;
		close(_server_socket);
		exit(1);
	}
}

Server::~Server() {
	if (_server_socket != -1)
		close(_server_socket);
}


/************************************** FUNCTIONS **************************************/

void Server::addUser(Client &client, const std::string &username, const std::string &nickname) {
	static int current_index = 1;
	User user(current_index++, username, nickname);
	client.setUser(user);
	_clients[client.getClientSocket()] = client;
}

std::string trim(const std::string& str) {
	size_t start = 0;
	while (start < str.size() && std::isspace(str[start])) {
		start++;
	}

	size_t end = str.size();
	while (end > start && std::isspace(str[end - 1])) {
		end--;
	}

	return (str.substr(start, end - start));
}

void Server::startServer() {
	socklen_t client_len;
	Client client;

	std::cout << bannerServer;

	std::cout << ". . . Listening on _port " << _port << " . . . " << std::endl;

	while (true) {
		client_len = sizeof(client.getClientAddr());
		int client_socket = accept(_server_socket, (struct sockaddr*)&client.getClientAddr(), &client_len);
		if (client_socket == -1) {
			std::cerr << "Error: connection not accepted" << std::endl;
			continue;
		}

		client.setClientSocket(client_socket);
		std::cout << "\nNew connection accepted ​✅" << std::endl;

		char buffer[1024];
		ssize_t bytes_received;

		client.sendClientMsg(client_socket, bannerIRC);

		while (true)
		{
			const char* pass_msg = BOLD "Enter Server password: " RESET;
			client.sendClientMsg(client_socket, pass_msg);

			bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
			if (bytes_received <= 0) {
				std::cerr << "Error: reception failed" << std::endl;
				break;
			}
			buffer[bytes_received] = '\0';

			std::string pass(buffer);
			pass = trim(pass);

			if (pass != this->_password) {
				const char* invalid_pass = RED "Wrong password \n\n" RESET;
				client.sendClientMsg(client_socket, invalid_pass);
			}
			else
				break;
		}

		client.welcomeClient(client_socket);

		// Handle Username
		client.sendClientMsg(client_socket, "Enter your username: ");
		bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
		if (bytes_received <= 0) {
			std::cerr << "Error: reception failed" << std::endl;
			close(client_socket);
			continue;
		}
		buffer[bytes_received] = '\0';
		std::string username = trim(std::string(buffer));

		// Handle Nickname
		client.sendClientMsg(client_socket, "Enter your nickname: ");
		bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
		if (bytes_received <= 0) {
			std::cerr << "Error: reception failed" << std::endl;
			close(client_socket);
			continue;
		}
		buffer[bytes_received] = '\0';
		std::string nickname = trim(std::string(buffer));

		addUser(client, username, nickname);
		client.sendClientMsg(client_socket, "You are now registered!\n");

		while ((bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0)) > 0)
		{
			buffer[bytes_received] = '\0';
			std::string message(buffer);
			client.handleClientMsg(message, client);
		}

		if (bytes_received == -1)
			std::cerr << "Error: data reception failed" << std::endl;
		else
			std::cout << "Client disconnected ❌" << std::endl;

		close(client_socket);
	}
}


#include "../includes/Server.hpp"

int main(int ac, char **av) {
	if (ac != 3) {
		std::cerr << RED << "Error: must be ./Server <port> <password>" << RESET << std::endl;
		return (1);
	}

	int port = std::atoi(av[1]);
	std::string password = av[2];

	Server server(port, password);
	server.startServer();

	return (0);
}